---
import Section from "@/components/ui/section.astro";

interface Props {
  currentPage: number;
  totalPages: number;
  baseUrl: string;
  class?: string;
}

const { currentPage, totalPages, baseUrl, class: className = "" } = Astro.props;

if (totalPages <= 1) return null;

const HIDDEN = -1;
const ADJ_DIST = 2;
const VISIBLE = ADJ_DIST * 2 + 1;

// Calculate visible page numbers
let count = 1;
let l = currentPage;
let r = currentPage;

while (0 < l - 1 && r + 1 <= totalPages && count + 2 <= VISIBLE) {
  count += 2;
  l--;
  r++;
}

while (0 < l - 1 && count < VISIBLE) {
  count++;
  l--;
}

while (r + 1 <= totalPages && count < VISIBLE) {
  count++;
  r++;
}

const pages: number[] = [];
if (l > 1) pages.push(1);
if (l === 3) pages.push(2);
if (l > 3) pages.push(HIDDEN);

for (let i = l; i <= r; i++) pages.push(i);

if (r < totalPages - 2) pages.push(HIDDEN);
if (r === totalPages - 2) pages.push(totalPages - 1);
if (r < totalPages) pages.push(totalPages);

const buildPageUrl = (page: number) => {
  // Page 1: use baseUrl directly (e.g., /post)
  // Page 2+: append page number (e.g., /post/2)
  return page === 1 ? baseUrl : `${baseUrl}/${page}`;
};

const prevPage = currentPage > 1 ? currentPage - 1 : undefined;
const nextPage = currentPage < totalPages ? currentPage + 1 : undefined;
---

<Section padding="sm">
  <div class={`flex flex-row justify-center gap-3 ${className}`}>
    <a
      href={prevPage ? buildPageUrl(prevPage) : undefined}
      aria-label={prevPage ? "Previous Page" : undefined}
      class={`flex size-12 items-center justify-center overflow-hidden rounded-full transition-colors ${
        prevPage
          ? "text-content hover:bg-accent hover:text-accent-foreground"
          : "text-content/50 cursor-not-allowed"
      }`}
    >
      {
        prevPage ? (
          <span class="i-lucide-chevron-left size-6" />
        ) : (
          <span class="i-lucide-chevron-left size-6 opacity-50" />
        )
      }
    </a>

    <div
      class="text-content flex flex-row items-center gap-2 bg-none font-bold"
    >
      {
        pages.map((p, _index) => {
          if (p === HIDDEN) {
            return <span class="i-lucide-more-horizontal mx-1 size-5" />;
          }

          if (p === currentPage) {
            return (
              <div class="bg-primary/90 text-primary-foreground flex size-9 items-center justify-center rounded-full">
                {p}
              </div>
            );
          }

          return (
            <a
              href={buildPageUrl(p)}
              aria-label={`Page ${p}`}
              class="hover:bg-accent hover:text-accent-foreground flex size-9 items-center justify-center rounded-full transition-colors"
            >
              {p}
            </a>
          );
        })
      }
    </div>

    <a
      href={nextPage ? buildPageUrl(nextPage) : undefined}
      aria-label={nextPage ? "Next Page" : undefined}
      class={`flex size-12 items-center justify-center overflow-hidden rounded-full transition-colors ${
        nextPage
          ? "text-content hover:bg-accent hover:text-accent-foreground"
          : "text-content/50 cursor-not-allowed"
      }`}
    >
      {
        nextPage ? (
          <span class="i-lucide-chevron-right size-6" />
        ) : (
          <span class="i-lucide-chevron-right size-6 opacity-50" />
        )
      }
    </a>
  </div>
</Section>
